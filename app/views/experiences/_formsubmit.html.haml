%h1= t('experience.add_new')

= simple_form_for @experience, :url => experiences_path, :method => :post, html: {class: 'submit-new-bathroom-form form-vertical'} do |f|
  %h5= t('experience.required')
  //.clearfix
  //  %button.btn.btn-light-purple.guess-btn{:type => "button", :value => t('experience.guess_location')}
  //    = t('experience.guess_location')
  //    %i.fa.fa-refresh.fa-spin

  / Add map for preview
  #mapArea.hidden{ data: { latitude: 38.904735, longitude: -77.033812 } }

  .nearby-container.footroom
    // Content of nearby experiences gets rendered here.

  //= f.input :name, :required => true
  //= f.input :street, :required => true
  //= f.input :city, :required => true
  //= f.input :state, :required => true
  //= f.input :country, priority: ["United States", "Canada", "United Kingdom"], :required => true, input_html: {class: 'form-control'}

  = f.hidden_field :latitude
  = f.hidden_field :longitude
  = f.hidden_field :edit_id
  = f.hidden_field :approved
  //= f.input :accessible, :collection => [[t('experience.accessible'), true], [t('experience.not_accessible'), false]], :include_blank => false
  //= f.input :unisex, :collection => [[t('experience.type.unisex'), true], [t('experience.type.single_stall'), false]], :include_blank => false
  //= f.input :changing_table, :collection => [[t('experience.changing_table'), true], [t('experience.no_changing_table'), false]], :include_blank => false
  //= f.input :directions, :placeholder => t('experience.directions_hint'), :as => :text, :required => false, :input_html => { :class => "span6" }
  //= f.input :comment, :placeholder => t('experience.comments_hint'), :as => :text, :required => false, :input_html => { :class => "span6" }

  = f.input :zip_code, 
    label: "Zip code where I reside", 
    required: true, 
    input_html: { pattern: "\\d{5}", maxlength: 5, minlength: 5, placeholder: "12345" }
  = f.input :federal_agency, 
    label: "Federal agency involved in my experience", 
    required: true, 
    input_html: { class: 'agency-autocomplete', data: { autocomplete_url: agencies_path } }
  = f.input :agency_website, 
    label: "Website of agency office or specific federal program featured in your experience", 
    as: :url, 
    required: false, 
    input_html: { placeholder: "https://oig.usaid.gov/", pattern: "https?://.+" }
  = f.input :experience, 
    label: "My experience", 
    as: :select, 
    collection: [ "Termination of a federal program, contract, or grant that funded me or the organization I work for", "Indefinite withholding of money for a federal program, contract, or grant", "Termination of my job as a federal employee", "Investigation of me, my organization, or my federally-funded program or contract", "Loss of benefits provided directly for the federal government", "Loss of benefits provided through an entity or organization receiving federal funds", "Termination of my job because a White House policy has forbidden or denounced the law necessitating my position ", "Other" ], 
    prompt: "Select one", 
    required: true
  %br  
  = f.input :immediate_results, as: :hidden
  %p As an immediate result of the federal action
  %div#immediate_results_chips.filter-chips
    - ["I am no longer employed by my organization", "My rights were violated", "I was discriminated against", "Other"].each do |option|
      %span.chip{ data: { value: option } }= option

  %p My story needs to be heard by others.
  = f.input :experience_details, 
    label: "Please describe the details of your experience", 
    as: :text, 
    required: true, 
    input_html: { rows: 5, class: "span6" }
  %hint (Please describe the details of your experience, including the purpose of your job or program; the reason for the agency (in)action, cancellation or termination, if known; and the effect(s) of the status change on your organization, you, or others.) 
  %br
  %br
  %p I am open to being contacted privately if someone wants to discuss the details of my experience with me.
  = f.input :open_to_contact, as: :hidden
  %div#open_to_contact_chips.filter-chips
    %span.chip{ data: { value: "true" } } Yes
    %span.chip{ data: { value: "false" } } No


  
  = f.input :contact_name, label: "Name", required: false
  = f.input :contact_email, label: "Email", required: false
  = f.input :contact_phone, label: "Phone number", required: false 


  .form-group
    .g-recaptcha{'data-sitekey' => "#{ENV['RECAPTCHA_SITE_KEY']}"}

  / Click to preview location
  //%button{type: 'button', class: 'preview-btn linkbutton'}
  //  = t('experience.preview')
  = f.button :submit, t('experience.restsubmit'), :class => "linkbutton"

:css
  .filter-chips {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .chip {
    padding: 8px 12px;
    border: 2px solid #0044cc;
    background-color: #AFD6FFFF;
    color: white;
    border-radius: 16px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.2s, border-color 0.2s;
  }

  .chip:hover {
    background-color: #0056b3;
    border-color: #003c99;
  }

  .chip.selected {
    background-color: #0044cc;
    border-color: #002a80;
    font-weight: bold;
  }

:javascript
  document.addEventListener('DOMContentLoaded', function() {

    // Immediate Results - multi-select chips
    var irHidden = document.getElementById('experience_immediate_results');
    var irChips = document.querySelectorAll('#immediate_results_chips .chip');
    var irSelected = [];
    irChips.forEach(function(chip) {
      chip.addEventListener('click', function() {
        chip.classList.toggle('selected');
        var value = chip.getAttribute('data-value');
        if (chip.classList.contains('selected')) {
          irSelected.push(value);
        } else {
          irSelected = irSelected.filter(function(item) { return item !== value; });
        }
        // Store as JSON string or comma-separated list, as preferred.
        irHidden.value = JSON.stringify(irSelected);
      });
    });

    // Open to Contact - single select chips
    var otcHidden = document.getElementById('experience_open_to_contact');
    var otcChips = document.querySelectorAll('#open_to_contact_chips .chip');
    otcChips.forEach(function(chip) {
      chip.addEventListener('click', function() {
        otcChips.forEach(function(otherChip) {
          otherChip.classList.remove('selected');
        });
        chip.classList.add('selected');
        otcHidden.value = chip.getAttribute('data-value');
      });
    });
    otcChips[1].classList.add('selected');
    otcHidden.value = otcChips[1].getAttribute('data-value');


    const urlParams = new URLSearchParams(window.location.search);
    
    if (urlParams.get('test') === 'true') {
      document.getElementById('experience_federal_agency').value = 'USAID';
      document.getElementById('experience_agency_website').value = 'https://oig.usaid.gov';
      document.getElementById('experience_experience').value = 'Other';
      document.getElementById('experience_experience_details').value = 'Testing';
      document.getElementById('experience_immediate_results').value = 'Other';
      document.getElementById('experience_contact_name').value = 'John Doe';
      document.getElementById('experience_contact_email').value = 'johndoe@example.com';
      document.getElementById('experience_contact_phone').value = '555-123-4567';
      document.getElementById('experience_zip_code').value = '20004';
    }

    console.log("load fired. Autocomplete instance:", $.fn.autocomplete);
    $('.agency-autocomplete').autocomplete({
      source: function(request, response) {
        $.ajax({
          url: $('.agency-autocomplete').data('autocompleteUrl'),
          dataType: 'json',
          data: { term: request.term },
          success: function(data) {
            response(data);
          }
        });
      },
      minLength: 2
    });
  });
