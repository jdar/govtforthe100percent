%h1= t('experience.add_new')

= simple_form_for @experience, :url => experiences_path, :method => :post, html: {class: 'submit-new-bathroom-form form-vertical'} do |f|
  //%h5= t('experience.required')
  //.clearfix
  //  %button.btn.btn-light-purple.guess-btn{:type => "button", :value => t('experience.guess_location')}
  //    = t('experience.guess_location')
  //    %i.fa.fa-refresh.fa-spin

  / Add map for preview
  #mapArea.hidden{ data: { latitude: 38.904735, longitude: -77.033812 } }

  .nearby-container.footroom
    // Content of nearby experiences gets rendered here.

  //= f.input :name, :required => true
  //= f.input :street, :required => true
  //= f.input :city, :required => true
  //= f.input :state, :required => true
  //= f.input :country, priority: ["United States", "Canada", "United Kingdom"], :required => true, input_html: {class: 'form-control'}

  = f.hidden_field :latitude
  = f.hidden_field :longitude
  = f.hidden_field :edit_id
  = f.hidden_field :approved
  //= f.input :accessible, :collection => [[t('experience.accessible'), true], [t('experience.not_accessible'), false]], :include_blank => false
  //= f.input :unisex, :collection => [[t('experience.type.unisex'), true], [t('experience.type.single_stall'), false]], :include_blank => false
  //= f.input :changing_table, :collection => [[t('experience.changing_table'), true], [t('experience.no_changing_table'), false]], :include_blank => false
  //= f.input :directions, :placeholder => t('experience.directions_hint'), :as => :text, :required => false, :input_html => { :class => "span6" }
  //= f.input :comment, :placeholder => t('experience.comments_hint'), :as => :text, :required => false, :input_html => { :class => "span6" }

  = f.input :zip_code, 
    label: "Zip code of my US residence:", 
    required: true, 
    input_html: { pattern: "\\d{5}", maxlength: 5, minlength: 5, placeholder: "12345", required: false }
  = f.input :federal_agency, 
    label: "Federal agency involved in my experience:", 
    required: true, 
    input_html: { class: 'agency-autocomplete', data: { autocomplete_url: agencies_path } }
  = f.input :agency_website, 
    label: "Website of agency office or specific federal program featured in your experience:", 
    as: :url, 
    required: false, 
    input_html: { placeholder: "https://oig.usaid.gov/", pattern: "https?://.+", required: false }
  = f.input :experience, 
    label: "My experience:", 
    as: :select, 
    collection: [ "Termination of a federal program, contract, or grant that funded me or the organization I work for", "Indefinite withholding of money for a federal program, contract, or grant", "Termination of my job as a federal employee", "Investigation of me, my organization, or my federally-funded program or contract", "Loss of benefits provided directly by the federal government", "Loss of benefits provided through an entity or organization receiving federal funds", "Termination of my job because a White House policy has forbidden or denounced the law necessitating my position ", "Other" ], 
    prompt: "Select one", 
    required: true,
    input_html: { required: false }
  %br  
  = f.input :immediate_results,
    label: "As an immediate result of the federal action (Select all that apply):",
    as: :select, 
    collection: ["My organization had to terminate a program that it offered to beneficiaries", "My organization had to furlough or terminate one or more paid positions", "My organization had to close its doors (temporarily or permanently)", "I am no longer employed by my organization", "I had to accept  a different job within my organization", "I am no longer employed by the federal government", "I or my organization must respond to an audit or investigation", "I am no longer receiving benefits that I had been receiving on an ongoing basis", "Other",],
    input_html: { multiple: true, size: 9, required: false  },
    required: true
  %br  
  .my-story-title My story needs to be heard by others.
  %br
  %strong Please describe the details of your experience:
  %br
  (Include the purpose of your job or program; the reason for the agency (in)action, cancellation or termination, if known; and the effect(s) of the status change on your organization, you, or others.)
  = f.input :experience_details, 
    label: "", 
    as: :text, 
    required: true, 
    input_html: { rows: 5, class: "span6",required: false, maxlength: 3500, id: "experience_details" }
  %p#char-count 0/3,500 characters; 800 character minimum
  %br
  %fieldset
    %legend{style: "font-size:20pt"} Open to Being Contacted:
    %p I am open to being contacted privately if someone wants to discuss the details of my experience with me (e.g., media, congressman, legal team)
    = f.input :open_to_contact, as: :hidden
    %div#open_to_contact_chips.filter-chips
      %span.chip{ data: { value: "true" } } Yes
      %span.chip{ data: { value: "false" } } No


    %br
    %br
    = f.input :contact_name, label: "Name (optional):", required: false,
      input_html: { required: false }
    = f.input :contact_email, label: "Email (optional):", required: false,
      input_html: { required: false }
    = f.input :contact_phone, label: "Phone number (optional):", required: false,
      input_html: { required: false, class: "phone-input", type: "tel", maxlength: 14, id: "phone_number" }



  .form-group
    .g-recaptcha{'data-sitekey' => "#{ENV['RECAPTCHA_SITE_KEY']}"}

  / Click to preview location
  //%button{type: 'button', class: 'preview-btn linkbutton'}
  //  = t('experience.preview')
  = f.button :submit, t('experience.restsubmit'), :class => "linkbutton"

:css
  .my-story-title{
    font-size: 20pt;
    font-weight: bold;
  }
  .filter-chips {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .chip {
    padding: 8px 12px;
    border: 2px solid #0044cc;
    background-color: #AFD6FFFF;
    color: white;
    border-radius: 16px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.2s, border-color 0.2s;
  }

  .chip:hover {
    background-color: #0056b3;
    border-color: #003c99;
  }

  .chip.selected {
    background-color: #0044cc;
    border-color: #002a80;
    font-weight: bold;
  }

  fieldset {
      border: 2px solid #007BFF; /* Blue border */
      border-radius: 8px; /* Rounded corners */
      padding: 15px;
      margin: 20px 0;
      background-color: #f9f9f9; /* Light gray background */
      box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow */
  }

  legend {
      font-size: 1.2rem; /* Slightly larger text */
      font-weight: bold;
      color: #007BFF; /* Blue text */
      padding: 0 10px; /* Adds padding around the text */
      background-color: white;
      border-radius: 5px;
  }


:javascript
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('[title="required"]').forEach(element => element.remove());

    const textarea = document.getElementById("experience_details");
    const charCount = document.getElementById("char-count");
    const maxChars = 3500;

    function updateCharCount() {
      let statement = `${textarea.value.length.toLocaleString()}/${maxChars.toLocaleString()} characters`;
      if(textarea.value.length > 0){
      if(textarea.value.length < 800){
        statement += `; ${(800 - textarea.value.length).toLocaleString()} more characters required.`;
      }
      }
      charCount.textContent = statement; 
    }

    textarea.addEventListener("input", updateCharCount);
    updateCharCount(); // Initialize count on page load

    // Immediate Results - multi-select chips
    var irHidden = document.getElementById('experience_immediate_results');
    var irChips = document.querySelectorAll('#immediate_results_chips .chip');
    var irSelected = [];
    irChips.forEach(function(chip) {
      chip.addEventListener('click', function() {
        chip.classList.toggle('selected');
        var value = chip.getAttribute('data-value');
        if (chip.classList.contains('selected')) {
          irSelected.push(value);
        } else {
          irSelected = irSelected.filter(function(item) { return item !== value; });
        }
        // Store as JSON string or comma-separated list, as preferred.
        irHidden.value = JSON.stringify(irSelected);
      });
    });

    // Open to Contact - single select chips
    var otcHidden = document.getElementById('experience_open_to_contact');
    var otcChips = document.querySelectorAll('#open_to_contact_chips .chip');
    otcChips.forEach(function(chip) {
      chip.addEventListener('click', function() {
        otcChips.forEach(function(otherChip) {
          otherChip.classList.remove('selected');
        });
        chip.classList.add('selected');
        otcHidden.value = chip.getAttribute('data-value');
      });
    });
    otcChips[1].classList.add('selected');
    otcHidden.value = otcChips[1].getAttribute('data-value');


    const urlParams = new URLSearchParams(window.location.search);
    
    if (urlParams.get('test') === 'true') {
      document.getElementById('experience_federal_agency').value = 'USAID';
      document.getElementById('experience_agency_website').value = 'https://oig.usaid.gov';
      document.getElementById('experience_experience').value = 'Other';
      document.getElementById('experience_experience_details').value = 'Testing';
      document.getElementById('experience_immediate_results').value = 'Other';
      document.getElementById('experience_contact_name').value = 'John Doe';
      document.getElementById('experience_contact_email').value = 'johndoe@example.com';
      document.getElementById('experience_contact_phone').value = '555-123-4567';
      document.getElementById('experience_zip_code').value = '20004';
    }

    console.log("load fired. Autocomplete instance:", $.fn.autocomplete);
    $('.agency-autocomplete').autocomplete({
      source: function(request, response) {
        $.ajax({
          url: '/us_agencies.csv',
          dataType: 'text',
          success: function(data) {
            var lines = data.split(/\r?\n/);
            var headers = lines[0].split(',');
            var agencyNameIndex = headers.indexOf('Agency Name');
            var websiteIndex = headers.indexOf('Website');

            var results = [];
            for (var i = 1; i < lines.length; i++) {
              var line = lines[i];
              if (line.trim() === '') continue;
              var values = line.split(',');

              // Remove surrounding quotes from each field
              var agencyName = values[agencyNameIndex].replace(/^"|"$/g, '');
              var website = values[websiteIndex].replace(/^"|"$/g, '');

              // Filter using a case-insensitive match on the agency name.
              if (agencyName.toLowerCase().indexOf(request.term.toLowerCase()) !== -1) {
                results.push({
                  label: agencyName, // Display text in the autocomplete list
                  value: agencyName, // Value to populate the input when selected
                  website: website  // Additional data for further use
                });
              }
            }
            response(results);
          }
        });
      },
      minLength: 2,
      focus: function(event, ui) {
        // Prevent default behavior so that the input is not auto-populated with a partial value
        event.preventDefault();
        $(this).val(ui.item.label);
      },
      select: function(event, ui) {
        document.getElementById('experience_federal_agency').value = ui.item.value;
        document.getElementById('experience_agency_website').value = ui.item.website;
        // Execute any additional logic if needed
        return false; // Prevent default behavior
      }
    }).data('ui-autocomplete')._renderItem = function(ul, item) {
      // Customize how the item appears in the list.
      // For instance, display a custom property along with the original label.
      var customHTML = '<div>' + item.value+ '</div>';
      return $("<li>")
        .append(customHTML)
        .appendTo(ul)
        .data("ui-autocomplete-item", item);
    };

    const phoneInput = document.getElementById("phone_number");
    phoneInput.addEventListener("input", function(event) {
      let value = phoneInput.value.replace(/\D/g, ""); // Remove non-numeric characters

      if (value.length > 10) {
        value = value.slice(0, 10); // Limit to 10 digits
      }

      let formattedValue = value;

      if (value.length > 6) {
        formattedValue = `(${value.slice(0,3)}) ${value.slice(3,6)}-${value.slice(6)}`;
      } else if (value.length > 3) {
        formattedValue = `(${value.slice(0,3)}) ${value.slice(3)}`;
      } else if (value.length > 0) {
        formattedValue = `(${value}`;
      }

      phoneInput.value = formattedValue;
    });

  });
